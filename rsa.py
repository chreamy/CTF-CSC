from Crypto.Util.number import long_to_bytes
import gmpy2

# Given values
n = 18265057107597779866597884538582628853713307768586435110207080298048187694780869567656942430670339572559823152383883576883502819533736904164818278423586352526201963494967439441637753567513370147045773871061134075422112054908889510716382052565780170872155578225334084082432085255278741720411215443816489222881352224044994165519502569319984367573107570876048367077069118783585530303213374142204157366206190031605043428832586873036183683042995321282454997466350566203942650330859731615046021785654585149909416512978302860070329884865178450600524259132868083411745751144340377629368907867141453743810832924668536466243809
e = 65537
c = 8631965940436429944894163631126903249759274551206411370542131336205933484793053176025575885323267342833971910650909909323107456735574287469481347345501438917280112062458229409565526794215206974566661929637901000644333356641773627233001295945263565375621896300262547091762817165019917000230306646963865883959513604518353083988678026714185995594434786844267309289980200871362855088228589325290626773483110976262657491456210545020305765215793359525582090787827693952379876932735912053338609080119482220914195918059943638450822717388668696760097677717745521544036879114364905106243383478943549632489056662073450838392364

# Calculate the difference between n and its square root
sqrt_n = gmpy2.isqrt(n)
x = sqrt_n + 1
y_sqr = x * x - n

# Keep incrementing x and checking if y is a perfect square
while True:
    y_sqr = x * x - n
    y = gmpy2.isqrt(y_sqr)
    if y * y == y_sqr:
        break
    x += 1

# Calculate the factors p and q
p = x + y
q = x - y

# Verify that p and q are prime
if gmpy2.is_prime(p) and gmpy2.is_prime(q):
    print("Factorization successful!")
    print(f"p = {p}")
    print(f"q = {q}")

    # Calculate the private key d
    d = gmpy2.invert(e, (p - 1) * (q - 1))

    # Decrypt the ciphertext
    plaintext = pow(c, d, n)
    plaintext_bytes = long_to_bytes(plaintext)
    print("Decrypted message:")
    print(plaintext_bytes.decode('utf-8'))
else:
    print("Factorization failed.")
